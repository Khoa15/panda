-- WRITER BY MINH HOA 
CREATE TABLE Account (
    email VARCHAR2(100) NOT NULL,
    fullname NVARCHAR2(100) NOT NULL,
    password VARCHAR2(100) NOT NULL,
    CONSTRAINT PK_ACCOUNT PRIMARY KEY (email)
);


CREATE TABLE Project (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY,
    email VARCHAR2(100) NOT NULL,
    name NVARCHAR2(100),
    description CLOB,
    priority NUMBER,
    created_at TIMESTAMP,
    updated_at TIMESTAMP,
    started_at TIMESTAMP,
    ended_at TIMESTAMP,
    CONSTRAINT PK_PROJECT PRIMARY KEY (id),
    CONSTRAINT FK_PROJECT_ACCOUNT FOREIGN KEY (email) REFERENCES Account(email)
);


CREATE TABLE Task (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY,
    pid NUMBER,
    description CLOB NOT NULL,
    done NUMBER(1, 0) DEFAULT 0,
    type_date NUMBER,
    is_full_day NUMBER(1, 0) DEFAULT 0,
    type_loop NUMBER,
    done_after_n_days NUMBER,
    priority NUMBER,
    created_at TIMESTAMP,
    updated_at TIMESTAMP,
    started_at TIMESTAMP,
    ended_at TIMESTAMP,
    CONSTRAINT PK_TASK PRIMARY KEY (id),
    CONSTRAINT FK_TASK_PROJECT FOREIGN KEY (pid) REFERENCES Project(id)
);


CREATE TABLE Collection (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY,
    email VARCHAR2(100) NOT NULL,
    name NVARCHAR2(100),
    CONSTRAINT PK_COLLECTION PRIMARY KEY (id),
    CONSTRAINT FK_COLLECT_CARD_ACCOUNT FOREIGN KEY (email) REFERENCES Account(email)
);



CREATE TABLE Card (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY,
    memory NUMBER,
    n_learn NUMBER,
    n_missed NUMBER,
    learn_next_time_at TIMESTAMP,
    CONSTRAINT PK_CARD PRIMARY KEY (id)
);

CREATE TABLE Flashcard (
    cid NUMBER,
    front NVARCHAR2(255),
    back NVARCHAR2(255),
    CONSTRAINT PK_FLASHCARD PRIMARY KEY (cid),
    CONSTRAINT FK_FLASHCARD_CARD FOREIGN KEY (cid) REFERENCES Card(id)
);

CREATE TABLE Vocab (
    word NVARCHAR2(100) NOT NULL,
    audio CLOB,
    ipa NVARCHAR2(50),
    CONSTRAINT PK_VOCAB PRIMARY KEY (word)
);

CREATE TABLE Vocab_TypeVocab (
    word NVARCHAR2(100),
    pos NVARCHAR2(10),
    cid NUMBER,
    meaning NVARCHAR2(100) NOT NULL,
    n_write NUMBER,
    n_write_missed NUMBER,
    CONSTRAINT PK_VOCAB_TYPEVOCAB PRIMARY KEY (word, pos),
    CONSTRAINT FK_VOCAB_TYPEVOCAB_VOCAB FOREIGN KEY (word) REFERENCES Vocab(word),
    CONSTRAINT FK_VOCAB_TYPEVOCAB_CARD FOREIGN KEY (cid) REFERENCES Card(id)
);




CREATE TABLE Example (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY,
    sentence NVARCHAR2(100),
    type NUMBER,
    CONSTRAINT PK_EXAMPLE PRIMARY KEY (id)
);

CREATE TABLE Example_Vocab_TypeVocab (
    sid NUMBER,
    word NVARCHAR2(100),
    pos NVARCHAR2(10),
    CONSTRAINT PK_SVT PRIMARY KEY (sid, word, pos),
    CONSTRAINT FK_SVT_Example FOREIGN KEY (sid) REFERENCES Example(id),
    CONSTRAINT FK_SVT_VOCAB_TYPEVOCAB FOREIGN KEY (word, pos) REFERENCES Vocab_TypeVocab(word, pos)
);

-- Them 
CREATE TABLE Sentence(
	id NUMBER GENERATED BY DEFAULT AS IDENTITY,
	origin NVARCHAR2(100),
	translated NVARCHAR2(100),
	type NUMBER(3),
	CONSTRAINT PK_Sentence PRIMARY KEY (id)
);

-- Them 
CREATE TABLE Sentence_Vocab_TypeVocab(
    sid NUMBER,
    word NVARCHAR2(100),
    pos NVARCHAR2(10),
    CONSTRAINT PK_SVT2 PRIMARY KEY (sid, word, pos),
    CONSTRAINT FK_SVT_Sentence2 FOREIGN KEY (sid) REFERENCES Sentence(id),
    CONSTRAINT FK_SVT_VOCAB_TYPEVOCAB2 FOREIGN KEY (word, pos) REFERENCES Vocab_TypeVocab(word, pos)
);



CREATE TABLE COLLECTION_CARD (
    collect_id NUMBER,
    card_id NUMBER,
    CONSTRAINT PK_COLLECT_CARD PRIMARY KEY (collect_id, card_id),
    CONSTRAINT FK_COLLECT_CARD_COLLECT FOREIGN KEY (collect_id) REFERENCES Collection(id),
    CONSTRAINT FK_COLLECT_CARD_CARD FOREIGN KEY (card_id) REFERENCES Card(id)
);

CREATE OR REPLACE PROCEDURE Register (p_email VARCHAR2, p_fullname NVARCHAR2, p_password VARCHAR2)
IS
BEGIN
    INSERT INTO Account (
        email,
        fullname,
        password
    )
    VALUES
    (
        p_email,
        p_fullname,
        p_password
    );
END Register;
/



CREATE OR REPLACE PROCEDURE Login (p_email VARCHAR2, p_password VARCHAR2)
AS
    v_result Account%ROWTYPE; -- Bi?n ?? l?u tr? k?t qu?
BEGIN
    SELECT * INTO v_result FROM Account WHERE email = p_email AND password = p_password AND ROWNUM = 1;
    -- CÃ³ th? s? d?ng v_result theo nhu c?u
END Login;
/

-- Khong con trong file database3 nua 
CREATE OR REPLACE PROCEDURE SelectProjects (p_email VARCHAR2)
AS
BEGIN
    FOR project_rec IN (SELECT * FROM Project WHERE email = p_email) LOOP
        -- CÃ³ th? s? d?ng project_rec theo nhu c?u
        NULL;
    END LOOP;
END SelectProjects;
/

-- Khong con trong file database3 nua 
CREATE OR REPLACE PROCEDURE SelectTasksProject (p_id NUMBER, p_pid NUMBER)
AS
BEGIN
    FOR task_rec IN (SELECT * FROM Task WHERE id = p_id AND pid = p_pid) LOOP
        -- CÃ³ th? s? d?ng task_rec theo nhu c?u
        NULL;
    END LOOP;
END SelectTasksProject;
/

-- Khong con trong file database3 nua 
CREATE OR REPLACE PROCEDURE SelectCollections (p_email VARCHAR2)
AS
BEGIN
    FOR collection_rec IN (SELECT * FROM Collection WHERE email = p_email) LOOP
        -- CÃ³ th? s? d?ng collection_rec theo nhu c?u
        NULL;
    END LOOP;
END SelectCollections;
/

-- Khong con trong file database3 nua 
CREATE OR REPLACE PROCEDURE SelectFlashcardsCollection (p_cid NUMBER)
AS
BEGIN
    FOR flashcard_rec IN (SELECT * FROM Card c JOIN Flashcard f ON c.id = f.cid WHERE c.id = p_cid) LOOP
        -- CÃ³ th? s? d?ng flashcard_rec theo nhu c?u
        NULL;
    END LOOP;
END SelectFlashcardsCollection;
/




CREATE OR REPLACE PROCEDURE AddAccount (p_email VARCHAR2, p_fullname NVARCHAR2, p_password VARCHAR2)
AS
    v_sql VARCHAR2(4000);
BEGIN
    -- ThÃªm d? li?u vÃ o b?ng Account
    INSERT INTO Account (email, fullname, password) VALUES (p_email, p_fullname, p_password);

    -- T?o Login
    v_sql := 'CREATE USER ' || p_email || ' IDENTIFIED BY ' || p_password;
    EXECUTE IMMEDIATE v_sql;

    -- T?o User vÃ  k?t n?i v?i Login
    v_sql := 'GRANT CREATE SESSION TO ' || p_email;
    EXECUTE IMMEDIATE v_sql;

    -- C?p quy?n trÃªn c? s? d? li?u (thay ??i tÃªn c? s? d? li?u n?u c?n)
    v_sql := 'GRANT SELECT, INSERT, UPDATE, DELETE ON PANDA TO ' || p_email;
    EXECUTE IMMEDIATE v_sql;
END AddAccount;
/

-- cÅ© 
CREATE OR REPLACE PROCEDURE SelectAccount (p_email VARCHAR2, p_password VARCHAR2)
AS
    v_email Account.email%TYPE;
    v_fullname Account.fullname%TYPE;
BEGIN
    -- L?y thÃ´ng tin tÃ i kho?n t? b?ng Account
    SELECT email, fullname INTO v_email, v_fullname
    FROM Account
    WHERE email = p_email AND password = p_password AND ROWNUM = 1;

    -- CÃ³ th? s? d?ng v_email vÃ  v_fullname theo nhu c?u
END SelectAccount;
/


-- má»›i, Tráº£ vá»? output phá»¥c vá»¥ cho resultset trÃªn táº§ng á»©ng dá»¥ng 
create or replace PROCEDURE SelectAccount (
    p_email IN VARCHAR2,
    p_password IN VARCHAR2,
    p_cursor OUT SYS_REFCURSOR
)
AS
BEGIN
    OPEN p_cursor FOR
    SELECT email, fullname
    FROM Account
    WHERE email = p_email AND password = p_password;
END SelectAccount;
/
-- END BY MINH HOA


-- WRITER BY HOANG PHUC
-- ROLES WITH DBA WHO IS CONNECT WITH SESSION AND SYSTEM 
-- RECOMMEND -> username = panda and password = panda
-- 


--1. Xem process voi session dang dang nhap 
CREATE OR REPLACE FUNCTION get_process_with_session (
    s_id VARCHAR2
) RETURN SYS_REFCURSOR IS
    pro_session SYS_REFCURSOR;
BEGIN
-- open cursor
    OPEN c_info FOR SELECT
                        s.sid,
                        s.serial#,
                        p.spid,
                        s.username,
                        s.program
                    FROM
                        v$session   s
                        JOIN v$process   p ON s.paddr = p.addr
                    WHERE
                        s.sid = s_id;
  -- Return the cursor
    RETURN pro_session;
END;
-- test by user panda
SELECT s.sid, s.serial#, p.spid, s.username, s.program
FROM v$session s
JOIN v$process p ON s.paddr = p.addr
WHERE s.sid = '1';
/
--test
SELECT s.sid, s.serial#, s.username, p.spid, s.program
FROM v$session s
JOIN v$process p ON s.paddr = p.addr
WHERE s.username = 'PANDA';

------------------

-- 2.  check if the user is in use. If the return result is greater than 0, the application is logged in from some device
-- => RESULT IS true false 
CREATE OR REPLACE FUNCTION is_user_signed_in (
    p_username VARCHAR2
) RETURN BOOLEAN IS
    v_session_count NUMBER;
BEGIN
    SELECT
        COUNT(*)
    INTO v_session_count
    FROM
        v$session
    WHERE
        username = p_username
        AND program IS NOT NULL;
    RETURN v_session_count > 0;
END;



-- view info in session 
-- 3. get session / id / username / HDH / program /
CREATE OR REPLACE FUNCTION get_session_info RETURN sys_refcursor IS
  -- Declare cursor variable
  c_info SYS_REFCURSOR;
BEGIN
-- open cursor
  OPEN c_info FOR
    SELECT s.sid,
           s.serial#,
           s.username,
           s.machine,
           s.program
    FROM v$session s;
  
  -- Return the cursor
  RETURN c_info;
END;



-- 4. Xu Ly ben JAVA : kill session tao String SQL truyen vào 2 tham so sid và serial# tra ve true false hoac 1 - 0 

-- 4.1 Function Truy van xem sid va serial#
CREATE OR REPLACE FUNCTION get_sid_serial_session RETURN SYS_REFCURSOR IS
-- Declare cursor variable
    c_info SYS_REFCURSOR;
BEGIN
-- open cursor
    OPEN c_info FOR SELECT
                        s.sid,
                        s.serial#
                    FROM
                        v$session s;
  -- Return the cursor
    RETURN c_info;
END;
-- 4.2 KILL SESSION => String SQL JAVA => RECOMMEND <= TWO VALIABLE SID AND SERIAL 
    -- ALTER SYSTEM KILL SESSION '<sid, serial#>';
    
-- 4.2.1 Kill SESSION PROC
CREATE OR REPLACE PROCEDURE KILL_SESSION (s_id VARCHAR2, serial_s NVARCHAR2)
AS
    -- variable
    v_sql VARCHAR2(5000);
BEGIN
    v_sql := 'ALTER SYSTEM KILL SESSION ' || s_id || ', ' || serial_s;
    EXECUTE IMMEDIATE v_sql;
END KILL_SESSION;


-- 5. VIEW  sga, pga, process, instance, database, datafile, control files, spfile



--5.1 GET INSTANCE INFO
select INSTANCE_NUMBER, INSTANCE_NAME, VERSION,STARTUP_TIME from v$instance;

CREATE OR REPLACE FUNCTION get_instance_info RETURN SYS_REFCURSOR IS
-- Declare cursor variable
    c_instance SYS_REFCURSOR;
BEGIN
-- open cursor
    OPEN c_instance FOR SELECT
                        i.instance_number,
                        i.instance_name,
                        i.version,
                        i.startup_time
                    FROM
                        v$instance i;
  -- Return the cursor

    RETURN c_instance;
END;
-- test
VAR rc REFCURSOR;
BEGIN
    :rc := get_instance_info;
END;
/
PRINT rc;


-- 5.2 GET SGA INFO 
DESC v$sgainfo;
SELECT v.* FROM v$sgainfo v;

CREATE OR REPLACE FUNCTION get_sga_info RETURN SYS_REFCURSOR IS
-- Declare cursor variable
    c_sga_info SYS_REFCURSOR;
BEGIN
-- open cursor
    OPEN c_sga_info FOR SELECT
                        v.NAME,
                        v.BYTES,
                        v.RESIZEABLE
                    FROM
                        v$sgainfo v;
  -- Return the cursor

    RETURN c_sga_info;
END;
/
-- 5.3 GET DATABASE INFO
DESC v$database

SELECT name, open_mode, database_role, platform_name, created
FROM v$database;

CREATE OR REPLACE FUNCTION get_database_info RETURN SYS_REFCURSOR IS
-- Declare cursor variable
    c_database_info SYS_REFCURSOR;
BEGIN
-- open cursor
    OPEN c_database_info FOR SELECT
                                 name,
                                 open_mode,
                                 database_role,
                                 platform_name,
                                 created
                             FROM
                                 v$database;
  -- Return the cursor

    RETURN c_database_info;
END;
/
-- 5.4 GET DBA_DATA_FILES 
SELECT file_name, tablespace_name, bytes, autoextensible
FROM dba_data_files;

CREATE OR REPLACE FUNCTION get_dba_data_files RETURN SYS_REFCURSOR IS
-- Declare cursor variable
    c_dba_data_files SYS_REFCURSOR;
BEGIN
-- open cursor
    OPEN c_dba_data_files FOR SELECT
                                  file_name,
                                  tablespace_name,
                                  bytes,
                                  autoextensible
                              FROM
                                  dba_data_files;
  -- Return the cursor

    RETURN c_dba_data_files;
END;
/

-- 5.5 GET CONTROL FILE

DESC v$controlfile;

SELECT NAME,IS_RECOVERY_DEST_FILE,BLOCK_SIZE ,FILE_SIZE_BLKS ,CON_ID FROM v$controlfile;

SHOW PARAMETER control_files; -- showw info control file

CREATE OR REPLACE FUNCTION get_control_files RETURN SYS_REFCURSOR IS
-- Declare cursor variable
    c_control_files SYS_REFCURSOR;
BEGIN
-- open cursor
    OPEN c_control_files FOR SELECT
                                 name,
                                 is_recovery_dest_file,
                                 block_size,
                                 file_size_blks,
                                 con_id
                             FROM
                                 v$controlfile;
  -- Return the cursor

    RETURN c_control_files;
END;
/

-- 5.6 GET SPFILES 
DESC v$spparameter;

SELECT NAME,TYPE,VALUE from v$spparameter;

SHOW PARAMETER spfile; -- xem thong tin sp file

CREATE OR REPLACE FUNCTION get_sp_files RETURN SYS_REFCURSOR IS
-- Declare cursor variable
    c_sp_files SYS_REFCURSOR;
BEGIN
-- open cursor
    OPEN c_sp_files FOR SELECT
                            name,
                            type,
                            value
                        FROM
                            v$spparameter;
  -- Return the cursor

    RETURN c_sp_files;
END;
/
-- 5.7 show table space
SHOW TABLESPACE;

SELECT tablespace_name, contents, status, extent_management, allocation_type, logging
FROM dba_tablespaces;

CREATE OR REPLACE FUNCTION get_tablespaces RETURN SYS_REFCURSOR IS
-- Declare cursor variable
    c_table_spaces SYS_REFCURSOR;
BEGIN
-- open cursor
    OPEN c_table_spaces FOR SELECT
                                tablespace_name,
                                contents,
                                status,
                                extent_management,
                                allocation_type,
                                logging
                            FROM
                                dba_tablespaces;
  -- Return the cursor

    RETURN c_table_spaces;
END;
/


--6. create tablespace dung select name from v$datafile; de check
create tablespace mytbs1 datafile 'D:\APP\ASUS\ORADATA\ORCL\mytbs1.dbf' size 100m;

create or replace PROCEDURE AddTableSpaces (
    name_tbs IN VARCHAR2,
    size_tbs IN VARCHAR2
)
AS
    v_sql VARCHAR2(3000);
BEGIN
    v_sql := 'CREATE TABLESPACE ' || name_tbs || ' datafile ' || 'D:\APP\ASUS\ORADATA\ORCL\' || name_tbs || '.dbf size ' || size_tbs || 'm' ;
    EXECUTE IMMEDIATE v_sql;
END AddTableSpaces;

SELECT file_name,bytes/1024/1024 as size_mb, tablespace_name FROM dba_data_files;


-- add datafile vao tablespace
alter tablespace mytbs1 add datafile 'D:\APP\ASUS\ORADATA\ORCL\mytbs2.dbf' size 10m;
-- END BY HOANG PHUC