--alter session set container=orclpdb;
DECLARE
    vcount INTEGER := 0;
BEGIN
    SELECT
        COUNT(1)
    INTO vcount
    FROM
        dba_users
    WHERE
        username = 'PANDA';

    IF vcount != 0 THEN
        EXECUTE IMMEDIATE ( 'DROP USER panda CASCADE' );
    END IF;
END;
/

CREATE USER panda IDENTIFIED BY panda;

GRANT dba TO panda;

GRANT ALL PRIVILEGES TO panda;
GRANT SELECT ON  V_$SGAINFO TO PANDA;
GRANT SELECT ON  V$SGA TO PANDA;
GRANT SELECT ON  V$PGASTAT TO PANDA;
GRANT SELECT ON V$SESSION TO PANDA;
GRANT SELECT ON  V$PROCESS TO PANDA;
GRANT SELECT ON  V$SPPARAMETER TO PANDA;
GRANT SELECT ON  V$DATABASE TO PANDA;
GRANT SELECT ON  V$INSTANCE TO PANDA;
GRANT SELECT ON  V$DATAFILE TO PANDA;
GRANT SELECT ON  V$CONTROLFILE TO PANDA;
GRANT SELECT ON  V$TABLESPACE TO PANDA;


GRANT SELECT ON  DBA_TABLESPACES TO PANDA;
GRANT SELECT ON  DBA_TABLESPACES TO PANDA;

--conn panda/panda@//localhost:1521/orclpdb

ALTER SESSION SET current_schema = panda;

-- CREATE TABLES


CREATE TABLE account (
    username VARCHAR2(100) NOT NULL,
    fullname NVARCHAR2(100) NOT NULL,
    CONSTRAINT pk_account PRIMARY KEY ( username )
);

CREATE TABLE project (
    id          NUMBER
        GENERATED BY DEFAULT AS IDENTITY,
    username    VARCHAR2(100) NOT NULL,
    name        NVARCHAR2(100),
    description CLOB,
    priority    NUMBER,
    created_at  TIMESTAMP,
    updated_at  TIMESTAMP,
    started_at  TIMESTAMP,
    ended_at    TIMESTAMP,
    CONSTRAINT pk_project PRIMARY KEY ( id ),
    CONSTRAINT fk_project_account FOREIGN KEY ( username )
        REFERENCES account ( username )
);

CREATE TABLE task (
    id                NUMBER
        GENERATED BY DEFAULT AS IDENTITY,
    pid               NUMBER,
    description       CLOB NOT NULL,
    done              NUMBER(1, 0) DEFAULT 0,
    type_date         NUMBER,
    is_full_day       NUMBER(1, 0) DEFAULT 0,
    type_loop         NUMBER,
    done_after_n_days NUMBER,
    priority          NUMBER,
    created_at        TIMESTAMP,
    updated_at        TIMESTAMP,
    started_at        TIMESTAMP,
    ended_at          TIMESTAMP,
    CONSTRAINT pk_task PRIMARY KEY ( id ),
    CONSTRAINT fk_task_project FOREIGN KEY ( pid )
        REFERENCES project ( id )
);

CREATE TABLE collection (
    id       NUMBER
        GENERATED BY DEFAULT AS IDENTITY,
    username VARCHAR2(100) NOT NULL,
    name     NVARCHAR2(100),
    CONSTRAINT pk_collection PRIMARY KEY ( id ),
    CONSTRAINT fk_collect_card_account FOREIGN KEY ( username )
        REFERENCES account ( username )
);

CREATE TABLE card (
    id                 NUMBER
        GENERATED BY DEFAULT AS IDENTITY,
    memory             NUMBER,
    n_learn            NUMBER,
    n_missed           NUMBER,
    learn_next_time_at TIMESTAMP,
    CONSTRAINT pk_card PRIMARY KEY ( id )
);

CREATE TABLE flashcard (
    cid   NUMBER,
    front NVARCHAR2(255),
    back  NVARCHAR2(255),
    CONSTRAINT pk_flashcard PRIMARY KEY ( cid ),
    CONSTRAINT fk_flashcard_card FOREIGN KEY ( cid )
        REFERENCES card ( id )
);

CREATE TABLE vocab (
    word  NVARCHAR2(100) NOT NULL,
    audio CLOB,
    ipa   NVARCHAR2(50),
    CONSTRAINT pk_vocab PRIMARY KEY ( word )
);

CREATE TABLE vocab_typevocab (
    word           NVARCHAR2(100),
    pos            NVARCHAR2(10),
    cid            NUMBER,
    meaning        NVARCHAR2(100) NOT NULL,
    n_write        NUMBER,
    n_write_missed NUMBER,
    CONSTRAINT pk_vocab_typevocab PRIMARY KEY ( word,
                                                pos ),
    CONSTRAINT fk_vocab_typevocab_vocab FOREIGN KEY ( word )
        REFERENCES vocab ( word ),
    CONSTRAINT fk_vocab_typevocab_card FOREIGN KEY ( cid )
        REFERENCES card ( id )
);

CREATE TABLE example (
    id       NUMBER
        GENERATED BY DEFAULT AS IDENTITY,
    sentence NVARCHAR2(100),
    type     NUMBER,
    CONSTRAINT pk_example PRIMARY KEY ( id )
);

CREATE TABLE example_vocab_typevocab (
    sid  NUMBER,
    word NVARCHAR2(100),
    pos  NVARCHAR2(10),
    CONSTRAINT pk_svt PRIMARY KEY ( sid,
                                    word,
                                    pos ),
    CONSTRAINT fk_svt_example FOREIGN KEY ( sid )
        REFERENCES example ( id ),
    CONSTRAINT fk_svt_vocab_typevocab FOREIGN KEY ( word,
                                                    pos )
        REFERENCES vocab_typevocab ( word,
                                     pos )
);

CREATE TABLE sentence (
    id         NUMBER
        GENERATED BY DEFAULT AS IDENTITY,
    origin     NVARCHAR2(100),
    translated NVARCHAR2(100),
    type       NUMBER(3),
    CONSTRAINT pk_sentence PRIMARY KEY ( id )
);

CREATE TABLE sentence_vocab_typevocab (
    sid  NUMBER,
    word NVARCHAR2(100),
    pos  NVARCHAR2(10),
    CONSTRAINT pk_svt2 PRIMARY KEY ( sid,
                                     word,
                                     pos ),
    CONSTRAINT fk_svt_sentence2 FOREIGN KEY ( sid )
        REFERENCES sentence ( id ),
    CONSTRAINT fk_svt_vocab_typevocab2 FOREIGN KEY ( word,
                                                     pos )
        REFERENCES vocab_typevocab ( word,
                                     pos )
);

CREATE TABLE collection_card (
    collect_id NUMBER,
    card_id    NUMBER,
    CONSTRAINT pk_collect_card PRIMARY KEY ( collect_id,
                                             card_id ),
    CONSTRAINT fk_collect_card_collect FOREIGN KEY ( collect_id )
        REFERENCES collection ( id ),
    CONSTRAINT fk_collect_card_card FOREIGN KEY ( card_id )
        REFERENCES card ( id )
);

-- PROCEDURE

CREATE OR REPLACE PROCEDURE addaccount (
    p_username VARCHAR2,
    p_fullname NVARCHAR2,
    p_password VARCHAR2
) AS
    v_sql VARCHAR2(4000);
BEGIN
    v_sql := 'CREATE USER '
             || p_username
             || ' IDENTIFIED BY '
             || p_password;
    EXECUTE IMMEDIATE v_sql;
    v_sql := 'GRANT CREATE SESSION, CONNECT TO ' || p_username;
    EXECUTE IMMEDIATE v_sql;
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
END addaccount;
/

CREATE OR REPLACE PROCEDURE signout(
    p_username VARCHAR2
) AS
BEGIN

  FOR session_rec IN (SELECT sid, serial# FROM v$session WHERE username = v_username)
  LOOP
    EXECUTE IMMEDIATE 'ALTER SYSTEM KILL SESSION ''' || session_rec.sid || ',' || session_rec.serial# || ''' IMMEDIATE';
  END LOOP;

EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
END signout;
/

--- PROCEDURE CARD

CREATE OR REPLACE PROCEDURE selectcardsanalysismemory (
    p_cards_cursor OUT SYS_REFCURSOR
) IS
BEGIN
    OPEN p_cards_cursor FOR SELECT
                                                                                memory,
                                                                                COUNT(*) AS count
                                                                            FROM
                                                                                card
                                                                                LEFT JOIN collection_card cc ON cc.card_id = card.id
                                                                                LEFT JOIN collection      c ON c.id = cc.collect_id
                                                    WHERE
                                                        c.username = sys_context('USERENV', 'CURRENT_USER')
                            GROUP BY
                                memory
                            ORDER BY
                                memory ASC;

END;
/

CREATE OR REPLACE PROCEDURE getcardsanalysismemory (
    p_cursor OUT SYS_REFCURSOR
) IS
BEGIN
    OPEN p_cursor FOR SELECT
                                                              memory,
                                                              COUNT(*) AS count
                                                          FROM
                                                              card
                                                              LEFT JOIN collection_card cc ON cc.card_id = card.id
                                                              LEFT JOIN collection      c ON c.id = cc.collect_id
                                        WHERE
                                            c.username = sys_context('USERENV', 'CURRENT_USER')
                      GROUP BY
                          memory
                      ORDER BY
                          memory ASC;

END;
/



-- END PROCEDURE CARD

--- PROCEDURE VOCAB


-- c? 
--CREATE OR REPLACE PROCEDURE AddVocab (
--    p_word IN NVARCHAR2,
--    p_pos IN NVARCHAR2,
--    p_meaning IN NVARCHAR2,
--    p_audio IN CLOB,
--    p_ipa IN NVARCHAR2
--)
--AS
--    v_id NUMBER;
--BEGIN
--savepoint start_trans;
--    INSERT INTO Card (memory, n_learn, n_missed, learn_next_time_at)
--    VALUES (0, 0, 0, SYSDATE);
--
--    v_id := NULL; 
--
--    SELECT SEQ_VOCAB_TYPEVOCAB.CURRVAL INTO v_id FROM DUAL;
--
--    INSERT INTO Vocab_TypeVocab (word, pos, cid, meaning, n_write, n_write_missed)
--    VALUES (p_word, p_pos, v_id, p_meaning, 0, 0);
--
--    INSERT INTO Vocab (word, audio, ipa)
--    VALUES (p_word, p_audio, p_ipa);
--EXCEPTION
--    WHEN OTHERS THEN
--        ROLLBACK TO start_trans;
--        RAISE;
--END;
--/
-- m?i, thêm sequence 
CREATE SEQUENCE seq_vocab_typevocab;
/

CREATE OR REPLACE PROCEDURE addvocab (
    p_word    IN NVARCHAR2,
    p_pos     IN NVARCHAR2,
    p_meaning IN NVARCHAR2,
    p_audio   IN CLOB,
    p_ipa     IN NVARCHAR2
) AS
    l_id INT;
BEGIN
    INSERT INTO card (
        memory,
        n_learn,
        n_missed,
        learn_next_time_at
    ) VALUES (
        0,
        0,
        0,
        sysdate
    );

    SELECT
        seq_vocab_typevocab.NEXTVAL
    INTO l_id
    FROM
        dual;

    INSERT INTO vocab_typevocab (
        word,
        pos,
        cid,
        meaning,
        n_write,
        n_write_missed
    ) VALUES (
        p_word,
        p_pos,
        l_id,
        p_meaning,
        0,
        0
    );

    INSERT INTO vocab (
        word,
        audio,
        ipa
    ) VALUES (
        p_word,
        p_audio,
        p_ipa
    );

    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
END addvocab;
/

-- END PROCEDURE VOCAB

--- PROCEDURE SENTENCE

CREATE OR REPLACE PROCEDURE addsentence (
    origin     IN NVARCHAR2,
    translated IN NVARCHAR2,
    type       IN NUMBER,
    word       IN NVARCHAR2,
    pos        IN NVARCHAR2
) AS
    sid INT;
BEGIN
    INSERT INTO sentence (
        origin,
        translated,
        type
    ) VALUES (
        origin,
        translated,
        type
    ) RETURNING id INTO sid;

    INSERT INTO sentence_vocab_typevocab (
        sid,
        word,
        pos
    ) VALUES (
        sid,
        word,
        pos
    );

    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
END addsentence;
/


-- END PROCEDURE SENTENCE

--- PROCEDURE COLLECTION

CREATE OR REPLACE PROCEDURE selectcollections (
    p_username IN VARCHAR2,
    p_cursor   OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN p_cursor FOR SELECT
                                            *
                                        FROM
                                            collection
                      WHERE
                          username = p_username;

END selectcollections;
/

CREATE OR REPLACE PROCEDURE selectcollectionsanalysis (
    p_username IN VARCHAR2,
    p_cursor   OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN p_cursor FOR SELECT
                                                              c.id,
                                                              c.name,
                                                              COUNT(cc.card_id)  AS total_card,
                                                              SUM(card.n_learn)  AS n_learn,
                                                              SUM(card.n_missed) AS n_missed,
                                                              COUNT(
                                                                  CASE
                                                                      WHEN card.memory > 5 THEN
                                                                          1
                                                                      ELSE
                                                                          NULL
                                                                  END
                                                              )                  AS memory
                                                          FROM
                                                              collection      c
                                                              LEFT JOIN collection_card cc ON cc.collect_id = c.id
                                                              LEFT JOIN card            card ON card.id = cc.card_id
                                        WHERE
                                            username = p_username
                      GROUP BY
                          c.name,
                          c.id;

END selectcollectionsanalysis;
/

CREATE OR REPLACE PROCEDURE deletecollection (
    name_param IN NVARCHAR2
) AS
BEGIN
    DELETE FROM collection
    WHERE
            name = name_param
        AND username = user;

    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
END;
/

CREATE OR REPLACE PROCEDURE addcollection (
    name_param IN NVARCHAR2
) AS
BEGIN
    INSERT INTO collection (
        username,
        name
    ) VALUES (
        user,
        name_param
    );

    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
END;
/


-- END PROCEDURE COLLECTION

--- PROCEDURE PROJECT


CREATE OR REPLACE PROCEDURE selectprojects (
    p_cursor OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN p_cursor FOR SELECT
                                            *
                                        FROM
                                            project
                      WHERE
                          username = sys_context('USERENV', 'CURRENT_USER');

END selectprojects;
/

-- END PROCEDURE PROJECT

--- PROCEDURE TASK

CREATE OR REPLACE PROCEDURE selectinboxes (
    p_cursor OUT SYS_REFCURSOR
) AS
    p_username VARCHAR2(100);
BEGIN
    p_username := sys_context('USERENV', 'CURRENT_USER');
    OPEN p_cursor FOR SELECT
                                            t.*
                                        FROM
                                            task    t
                                            RIGHT JOIN project p ON p.id = t.pid
                      WHERE
                              p.username = p_username
                          AND p.name = 'Inbox';

END selectinboxes;
/

CREATE OR REPLACE PROCEDURE selecttaskstoday (
    p_cursor OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN p_cursor FOR SELECT
                                            t.*
                                        FROM
                                            task    t
                                            RIGHT JOIN project p ON p.id = t.pid
                      WHERE
                              p.username = sys_context('USERENV', 'CURRENT_USER')
                          AND p.ended_at <= sysdate
                          AND p.started_at >= trunc(sysdate);

END selecttaskstoday;
/

CREATE OR REPLACE PROCEDURE selecttaskstodaybyprojectid (
    p_pid    IN NUMBER,
    p_cursor OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN p_cursor FOR SELECT
                                            t.*
                                        FROM
                                            task    t
                                            RIGHT JOIN project p ON p.id = t.pid
                      WHERE
                              p.username = sys_context('USERENV', 'CURRENT_USER')
                          AND p.ended_at <= sysdate
                          AND p.started_at >= trunc(sysdate)
                          AND t.pid = p_pid;

END selecttaskstodaybyprojectid;
/

CREATE OR REPLACE PROCEDURE inserttask (
    p_pid               IN NUMBER,
    p_description       IN NCLOB,
    p_done              IN NUMBER,
    p_type_date         IN NUMBER,
    p_is_full_day       IN NUMBER,
    p_type_loop         IN NUMBER,
    p_done_after_n_days IN NUMBER,
    p_priority          IN NUMBER,
    p_created_at        IN DATE,
    p_updated_at        IN DATE,
    p_started_at        IN DATE,
    p_ended_at          IN DATE
) AS
BEGIN
    INSERT INTO task (
        pid,
        description,
        done,
        type_date,
        is_full_day,
        type_loop,
        done_after_n_days,
        priority,
        created_at,
        updated_at,
        started_at,
        ended_at
    ) VALUES (
        p_pid,
        p_description,
        p_done,
        p_type_date,
        p_is_full_day,
        p_type_loop,
        p_done_after_n_days,
        p_priority,
        p_created_at,
        p_updated_at,
        p_started_at,
        p_ended_at
    );

    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
END;
/

CREATE OR REPLACE PROCEDURE insertinbox (
    p_description IN NCLOB
) AS
    v_pid INT;
BEGIN
    SELECT
        id
    INTO v_pid
    FROM
        project
    WHERE
        project.username = sys_context('USERENV', 'CURRENT_USER');

    INSERT INTO task (
        pid,
        description
    ) VALUES (
        v_pid,
        p_description
    );

    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
END;
/

CREATE OR REPLACE PROCEDURE deletetask AS
    v_tid INT;
BEGIN
    SELECT
        t.id
    INTO v_tid
    FROM
        task    t
        LEFT JOIN project p ON p.id = t.pid
    WHERE
        p.username = sys_context('USERENV', 'CURRENT_USER');

    DELETE FROM task
    WHERE
        task.id = v_tid;

    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
END;
/

-- END PROCEDURE TASK